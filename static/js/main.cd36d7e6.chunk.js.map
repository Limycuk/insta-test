{"version":3,"sources":["pages/Home/components/CardList/index.js","pages/Home/components/CardList/view/index.js","pages/Home/components/CardList/view/styles.js","pages/Home/index.js","pages/Home/components/Home/view/index.js","components/Router/index.js","components/Router/view/index.js","reducer/index.js","components/App/index.js","store.js","serviceWorker.js","index.js"],"names":["View","withStyles","container","backgroundColor","display","flexDirection","flexWrap","justifyContent","card","maxWidth","margin","minWidth","list","padding","listStyle","fontSize","media","maxHeight","name","fontWeight","withTheme","_ref","classes","react_default","a","createElement","className","data04012019","map","item","Card_default","key","id","href","username","target","rel","CardActionArea_default","CardMedia_default","component","alt","image","profile_pic_url","title","CardContent_default","Typography_default","gutterBottom","variant","full_name","mediaCounts","edge_followed_by","count","edge_follow","likes","comments","Home","AppBar_default","position","Toolbar_default","components_CardList","BrowserRouter","react","Route","exact","path","reducer","combineReducers","form","reduxFormReducer","store","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","App","es","components_Router","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd36d7e6.chunk.js","sourcesContent":["import View from './view';\n\nexport default View;\n","import React from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport data04012019 from '~/data/04-01-2019';\n\nimport styles from './styles';\n\nconst CardList = ({ classes }) => {\n  return (\n    <div className={classes.container}>\n      {data04012019.map((item) => {\n        return (\n          <Card key={item.id} className={classes.card}>\n            <a\n              href={'https://instagram.com/' + item.username}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\">\n              <CardActionArea>\n                <CardMedia\n                  component=\"img\"\n                  alt={item.username}\n                  className={classes.media}\n                  image={item.profile_pic_url}\n                  title={item.username}\n                />\n              </CardActionArea>\n            </a>\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {item.username}\n              </Typography>\n              <p className={classes.name}>{item.full_name || '-'}</p>\n              <ul className={classes.list}>\n                <li>\n                  <b>{item.mediaCounts}</b> posts\n                </li>\n                <li>\n                  <b>{item.edge_followed_by.count}</b> followers\n                </li>\n                <li>\n                  <b>{item.edge_follow.count}</b> following\n                </li>\n              </ul>\n              <ul className={classes.list}>\n                <li>\n                  <b>{item.likes}</b> likes\n                </li>\n                <li>\n                  <b>{item.comments}</b> comments\n                </li>\n                <li />\n              </ul>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default withStyles(styles, { withTheme: true })(CardList);\n","export default () => ({\n  container: {\n    backgroundColor: '#eeeeee',\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around'\n  },\n  card: {\n    maxWidth: 345,\n    margin: 20,\n    minWidth: 345\n  },\n  list: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: 0,\n    listStyle: 'none',\n    fontSize: 16,\n    margin: '8px 0'\n  },\n  media: {\n    maxHeight: 150,\n    maxWidth: 150,\n    margin: '0 auto'\n  },\n  name: {\n    fontSize: 16,\n    fontWeight: 600,\n    margin: '0 0 12px'\n  }\n});\n","import Home from './components/Home';\n\nexport default Home;\n","import React from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport CardList from '../../CardList';\n\nconst Home = () => {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <div>Сайтик</div>\n        </Toolbar>\n      </AppBar>\n      <CardList />\n    </div>\n  );\n};\n\nexport default Home;\n","import View from './view';\n\nexport default View;\n","import React, { Fragment } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Home from '~/pages/Home';\n\nconst Router = () => {\n  return (\n    <BrowserRouter>\n      <Fragment>\n        <Route exact path=\"/\" component={Home} />\n      </Fragment>\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","import { reducer as reduxFormReducer } from 'redux-form';\nimport { combineReducers } from 'redux';\n\nconst reducer = combineReducers({\n  form: reduxFormReducer\n});\n\nexport default reducer;\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport Router from '../Router';\nimport createStore from '../../store';\n\nconst { store } = createStore();\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  );\n};\n\nexport default App;\n","import { applyMiddleware, compose, createStore } from 'redux';\n\nimport reducer from './reducer';\n\nexport default () => {\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  const store = createStore(reducer, composeEnhancers(applyMiddleware()));\n\n  return { store };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}